// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"log"
// 	"os"
// 	"strings"

// 	"time"

// 	"gopkg.in/telebot.v3"
// )

// // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
// type WordData struct {
// 	Synonyms []string `json:"—Å–∏–Ω–æ–Ω–∏–º—ã"`
// 	Antonyms []string `json:"–∞–Ω—Ç–æ–Ω–∏–º—ã"`
// }

// // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
// var dictionary map[string]WordData

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞
// func loadJSON(filename string) error {
// 	file, err := os.ReadFile(filename)
// 	if err != nil {
// 		return err
// 	}

// 	err = json.Unmarshal(file, &dictionary)
// 	if err != nil {
// 		return err
// 	}

// 	return nil
// }

// func main() {
// 	// –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Ñ–∞–π–ª
// 	err := loadJSON("dictionary.json")
// 	if err != nil {
// 		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:", err)
// 	}

// 	botToken := "7489291057:AAFJ-tYlKMt75IwBWfGdxDkJ-hAGM8P8Cpk"

// 	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
// 	pref := telebot.Settings{
// 		Token:  botToken,
// 		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
// 	}

// 	bot, err := telebot.NewBot(pref)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
// 	bot.Handle("/start", func(c telebot.Context) error {
// 		return c.Send("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–Ω—Ç–æ–Ω–∏–º—ã.")
// 	})

// 	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞)
// 	bot.Handle(telebot.OnText, func(c telebot.Context) error {
// 		word := strings.ToLower(c.Text())

// 		data, exists := dictionary[word]
// 		if !exists {
// 			return c.Send("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ")
// 		}

// 		response := fmt.Sprintf("üîπ *–°–∏–Ω–æ–Ω–∏–º—ã:* %s\nüî∏ *–ê–Ω—Ç–æ–Ω–∏–º—ã:* %s",
// 			strings.Join(data.Synonyms, ", "),
// 			strings.Join(data.Antonyms, ", "))

// 		return c.Send(response, telebot.ModeMarkdown)
// 	})

// 	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// 	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
// 	bot.Start()
// }

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
type WordData struct {
	Synonyms []string `json:"—Å–∏–Ω–æ–Ω–∏–º—ã"`
	Antonyms []string `json:"–∞–Ω—Ç–æ–Ω–∏–º—ã"`
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
var dictionary map[string]WordData

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞
func loadJSON(filename string) error {
	file, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	err = json.Unmarshal(file, &dictionary)
	if err != nil {
		return err
	}

	return nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Ñ–∞–π–ª
	err := loadJSON("dictionary.json")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:", err)
	}

	botToken := "7489291057:AAFJ-tYlKMt75IwBWfGdxDkJ-hAGM8P8Cpk"

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	pref := telebot.Settings{
		Token:  botToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	bot.Handle("/start", func(c telebot.Context) error {
		return c.Send("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–Ω—Ç–æ–Ω–∏–º—ã.")
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞)
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		word := strings.ToLower(c.Text())

		data, exists := dictionary[word]
		if !exists {
			return c.Send("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ")
		}

		response := fmt.Sprintf("üîπ *–°–∏–Ω–æ–Ω–∏–º—ã:* %s\nüî∏ *–ê–Ω—Ç–æ–Ω–∏–º—ã:* %s",
			strings.Join(data.Synonyms, ", "),
			strings.Join(data.Antonyms, ", "))

		return c.Send(response, telebot.ModeMarkdown)
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
	go func() {
		fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
		bot.Start()
	}()

	// –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–∞–¥–∞–ª)
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞
	}

	fmt.Println("–§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", port)
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"))
	})

	log.Fatal(http.ListenAndServe(":"+port, nil))
}
